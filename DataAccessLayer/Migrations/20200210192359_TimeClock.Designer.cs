// <auto-generated />
using System;
using DataAccessLayer.Repositories.Impls.Ral;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(RalDbContext))]
    [Migration("20200210192359_TimeClock")]
    partial class TimeClock
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Entities.AccountBalanceRecordEntity", b =>
                {
                    b.Property<int?>("SN")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BalanceDebt")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Doc1Sn");

                    b.Property<string>("Doc2Sn");

                    b.Property<string>("Memo");

                    b.Property<string>("OwnerSn");

                    b.Property<int>("Type");

                    b.HasKey("SN");

                    b.ToTable("AccountBalanceRecords");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Address", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apartment");

                    b.Property<string>("Block");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("NumAtStreet");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Authentication.IdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("EmpId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Role");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("IdentityUsers");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Authentication.RefreshToken", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("IsInvalidated");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("JwtId");

                    b.Property<int>("UserId");

                    b.HasKey("Key");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BankEntity", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode");

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("BankEntity");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BusinessPartners.BusinessPartner", b =>
                {
                    b.Property<string>("Cid")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("BillingAddress");

                    b.Property<string>("Cellular");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<string>("Currency");

                    b.Property<decimal?>("DeliveryNotesBalance")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FederalTaxId");

                    b.Property<string>("GeoLocation");

                    b.Property<int?>("GroupSn");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsFavorite");

                    b.Property<bool?>("IsVatFree");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("Name");

                    b.Property<decimal?>("OrdersBalance")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int?>("PartnerType");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<int?>("SalesmanCode");

                    b.Property<string>("ShippingAddress");

                    b.Property<int?>("Type");

                    b.HasKey("Cid");

                    b.ToTable("BusinessPartners");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BusinessPartners.CardGroup", b =>
                {
                    b.Property<int>("Sn")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Sn");

                    b.ToTable("CardGroups");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressID");

                    b.Property<string>("BankAccount");

                    b.Property<string>("DefaultCurrency");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FederalTaxID");

                    b.Property<string>("Manager");

                    b.Property<string>("Name");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("WebSite");

                    b.HasKey("Code");

                    b.HasIndex("AddressID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Department", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Documents.CreditNoteEntity", b =>
                {
                    b.Property<int?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosingDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<string>("Currency");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerFederalTaxId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerSn");

                    b.Property<DateTime?>("Date");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal?>("DocTotal")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("ExternalSn");

                    b.Property<decimal?>("GrossProfit")
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool?>("IsCanceled");

                    b.Property<bool?>("IsClosed");

                    b.Property<string>("Items");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<int?>("OwnerEmployeeSn");

                    b.Property<int?>("SalesmanSn");

                    b.Property<int?>("Sn");

                    b.Property<decimal?>("ToPay")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("TotalDiscountAndRounding")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("VatPercent")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Key");

                    b.ToTable("CreditNotes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Documents.DeliveryNoteEntity", b =>
                {
                    b.Property<int?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosingDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<string>("Currency");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerFederalTaxId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerSn");

                    b.Property<DateTime?>("Date");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal?>("DocTotal")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("ExternalSn");

                    b.Property<decimal?>("GrossProfit")
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool?>("IsCanceled");

                    b.Property<bool?>("IsClosed");

                    b.Property<string>("Items");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<int?>("OwnerEmployeeSn");

                    b.Property<int?>("SalesmanSn");

                    b.Property<int?>("Sn");

                    b.Property<DateTime?>("SupplyDate");

                    b.Property<decimal?>("ToPay")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("TotalDiscountAndRounding")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("VatPercent")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Key");

                    b.ToTable("DeliveryNotes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Documents.InvoiceEntity", b =>
                {
                    b.Property<int?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosingDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<string>("Currency");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerFederalTaxId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerSn");

                    b.Property<DateTime?>("Date");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal?>("DocTotal")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("ExternalSn");

                    b.Property<decimal?>("GrossProfit")
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool?>("IsCanceled");

                    b.Property<bool?>("IsClosed");

                    b.Property<string>("Items");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<int?>("OwnerEmployeeSn");

                    b.Property<int?>("SalesmanSn");

                    b.Property<int?>("Sn");

                    b.Property<decimal?>("ToPay")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("TotalDiscountAndRounding")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("VatPercent")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Key");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Documents.Items.DocItemEntity", b =>
                {
                    b.Property<long>("DocKey");

                    b.Property<int?>("ItemNumber");

                    b.Property<string>("BaseDoc");

                    b.Property<int?>("BaseItemNumber");

                    b.Property<string>("Code");

                    b.Property<string>("Comments");

                    b.Property<string>("Currency");

                    b.Property<string>("Description");

                    b.Property<string>("Details");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("FollowDoc");

                    b.Property<bool>("IsOpen");

                    b.Property<decimal>("OpenQuantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal>("PricePerQuantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Properties");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("VisualOrder");

                    b.HasKey("DocKey", "ItemNumber");

                    b.ToTable("DocItemEntity");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Documents.OrderEntity", b =>
                {
                    b.Property<int?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosingDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<string>("Currency");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerFederalTaxId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerSn");

                    b.Property<DateTime?>("Date");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal?>("DocTotal")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("ExternalSn");

                    b.Property<decimal?>("GrossProfit")
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool?>("IsCanceled");

                    b.Property<bool?>("IsClosed");

                    b.Property<string>("Items");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<int?>("OwnerEmployeeSn");

                    b.Property<int?>("SalesmanSn");

                    b.Property<int?>("Sn");

                    b.Property<DateTime?>("SupplyDate");

                    b.Property<decimal?>("ToPay")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("TotalDiscountAndRounding")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("VatPercent")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Key");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Documents.QuotationEntity", b =>
                {
                    b.Property<int?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosingDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<string>("Currency");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerFederalTaxId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerSn");

                    b.Property<DateTime?>("Date");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal?>("DocTotal")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("ExternalSn");

                    b.Property<decimal?>("GrossProfit")
                        .HasColumnType("decimal(10,3)");

                    b.Property<bool?>("IsCanceled");

                    b.Property<bool?>("IsClosed");

                    b.Property<string>("Items");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<int?>("OwnerEmployeeSn");

                    b.Property<int?>("SalesmanSn");

                    b.Property<int?>("Sn");

                    b.Property<decimal?>("ToPay")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("TotalDiscountAndRounding")
                        .HasColumnType("decimal(10,3)");

                    b.Property<DateTime?>("ValidUntil");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("VatPercent")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Key");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("Sn")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthday");

                    b.Property<int?>("DepartmentCode");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("HomeAddressForeignKey");

                    b.Property<string>("HomePhone");

                    b.Property<string>("ID");

                    b.Property<bool>("IsActive");

                    b.Property<string>("JobTitle");

                    b.Property<string>("LastName");

                    b.Property<int?>("ManagerSN");

                    b.Property<string>("MiddleName");

                    b.Property<string>("OfficePhone");

                    b.Property<string>("PicPath");

                    b.Property<int?>("PositionCode");

                    b.Property<int?>("SalesmanSN");

                    b.Property<string>("WorkAddressForeignKey");

                    b.Property<string>("WorkCellular");

                    b.HasKey("Sn");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("HomeAddressForeignKey");

                    b.HasIndex("PositionCode");

                    b.HasIndex("WorkAddressForeignKey");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EmployeeTimeClock", b =>
                {
                    b.Property<long?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CheckIn");

                    b.Property<string>("CheckInLocation");

                    b.Property<DateTimeOffset?>("CheckOut");

                    b.Property<string>("CheckOutLocation");

                    b.Property<string>("Comments");

                    b.Property<int>("EmployeeSn");

                    b.Property<string>("Properties");

                    b.HasKey("Key");

                    b.ToTable("EmployeeTimeClocks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.JobPosition", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("JobPosition");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Products.ProductEntity", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AutoQuantityCalculationExpression");

                    b.Property<string>("Barcode");

                    b.Property<string>("BuyPriceList");

                    b.Property<DateTime?>("CreationDateTime");

                    b.Property<string>("Description");

                    b.Property<int>("GroupCode");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsForBuy");

                    b.Property<bool>("IsForSell");

                    b.Property<DateTime?>("LastUpdateDateTime");

                    b.Property<string>("Name");

                    b.Property<string>("NameForeign");

                    b.Property<string>("PictureURL");

                    b.Property<string>("Properties");

                    b.Property<string>("SellPriceList");

                    b.HasKey("Code");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Products.ProductGroupEntity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Name");

                    b.Property<string>("PictureURL");

                    b.HasKey("Code");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SalesmanEntity", b =>
                {
                    b.Property<int>("SN")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveStatus");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.HasKey("SN");

                    b.ToTable("Salesmen");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserData.LeadUserData", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LeadSn");

                    b.Property<bool>("IsFavorite");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("LastModifiedUtc");

                    b.HasKey("UserId", "LeadSn");

                    b.ToTable("LeadUserData");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserLocation", b =>
                {
                    b.Property<long?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("DeviceId");

                    b.Property<int>("EmployeeSn");

                    b.Property<int?>("ErrorCode");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.HasKey("Key");

                    b.ToTable("UserLocations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CompanyEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentCode");

                    b.HasOne("DataAccessLayer.Entities.Address", "HomeAddress")
                        .WithMany()
                        .HasForeignKey("HomeAddressForeignKey");

                    b.HasOne("DataAccessLayer.Entities.JobPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionCode");

                    b.HasOne("DataAccessLayer.Entities.Address", "WorkAddress")
                        .WithMany()
                        .HasForeignKey("WorkAddressForeignKey");
                });
#pragma warning restore 612, 618
        }
    }
}
